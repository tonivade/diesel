plugins {
  id 'java-library'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  alias(libs.plugins.errorprone)
  alias(libs.plugins.nexus)
}

group = 'com.github.tonivade'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
  mavenLocal()
  mavenCentral()
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

jacoco {
  toolVersion = '0.8.13'
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:all'
  options.release = 21
  if (!name.toLowerCase().contains("test")) {
    options.errorprone {
      check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
      option("NullAway:AnnotatedPackages", "com.github.tonivade.diesel")
      option("NullAway:SuggestSuppressions", "true")
    }
  } else {
    options.errorprone.enabled = false
  }
}

dependencies {
  errorprone(libs.errorprone)
  errorprone(libs.nullaway)

  compileOnly(libs.jspecify)
  implementation(libs.javapoet)

  testImplementation(libs.assertj)
  testImplementation(platform(libs.junitBom))
  testImplementation(libs.junitJupiter)
  testRuntimeOnly(libs.junitLauncher)
  testImplementation(libs.mockitoCore)
  testImplementation(libs.mockitoJunit)
  testImplementation(libs.compileTesting)
}

test {
  useJUnitPlatform()

  jvmArgs([
    '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED'])
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {

      from components.java

      pom {
        name = 'Diesel'
        description = 'Domain Specific Language Library'
        url = 'https://github.com/tonivade/diesel'
        inceptionYear = '2025'

        scm {
          url = 'https://github.com/tonivade/diesel'
          connection = 'scm:https://github.com/tonivade/diesel.git'
          developerConnection = 'scm:git://github.com/tonivade/diesel.git'
        }

        licenses {
          license {
            name = 'The MIT License (MIT)'
            url = 'https://github.com/tonivade/diesel/blob/master/LICENSE'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'tonivade'
            name = 'Antonio MuÃ±oz'
            email = 'antoniogmc@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  def signingKey = project.findProperty("signingKey")
  def signingPassword = project.findProperty("signingPassword")
  if (signingKey != null && signingPassword != null) {
    useInMemoryPgpKeys(file(signingKey).text, signingPassword)
    sign publishing.publications.mavenJava
  }
}

tasks.withType(Sign) {
  onlyIf { isReleaseVersion }
}

nexusPublishing {
  repositories {
    sonatype {

      stagingProfileId = '19a96b937cdb5'

      username = project.findProperty('nexusUsername')
      password = project.findProperty('nexusPassword')
    }
  }

  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(Duration.ofMillis(3000))
  }
}