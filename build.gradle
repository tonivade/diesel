plugins {
  id 'java-library'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  id 'net.ltgt.errorprone' version '4.1.0'
  id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'com.github.tonivade'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
  mavenLocal()
  mavenCentral()
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

jacoco {
  toolVersion = '0.8.11'
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:all'
  options.release = 21
  if (!name.toLowerCase().contains("test")) {
    options.errorprone {
      check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
      option("NullAway:AnnotatedPackages", "com.github.tonivade.diesel")
      option("NullAway:SuggestSuppressions", "true")
    }
  } else {
    options.errorprone.enabled = false
  }
}

dependencies {
  errorprone 'com.google.errorprone:error_prone_core:2.36.0'
  errorprone 'com.uber.nullaway:nullaway:0.12.3'

  compileOnly 'org.jspecify:jspecify:1.0.0'
  implementation 'com.palantir.javapoet:javapoet:0.6.0'

  testImplementation 'org.assertj:assertj-core:3.27.3'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.12.0'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  testImplementation 'org.mockito:mockito-core:5.14.2'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
  testImplementation 'com.google.testing.compile:compile-testing:0.21.0'
}

test {
  useJUnitPlatform()

  jvmArgs([
    '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED'])
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {

      from components.java

      pom {
        name = 'Diesel'
        description = 'Domain Specific Language Library'
        url = 'https://github.com/tonivade/diesel'
        inceptionYear = '2025'

        scm {
          url = 'https://github.com/tonivade/diesel'
          connection = 'scm:https://github.com/tonivade/diesel.git'
          developerConnection = 'scm:git://github.com/tonivade/diesel.git'
        }

        licenses {
          license {
            name = 'The MIT License (MIT)'
            url = 'https://github.com/tonivade/diesel/blob/master/LICENSE'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'tonivade'
            name = 'Antonio MuÃ±oz'
            email = 'antoniogmc@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
  onlyIf { isReleaseVersion }
}

nexusPublishing {
  repositories {
    sonatype {

      stagingProfileId = '19a96b937cdb5'

      username = project.findProperty('nexusUsername')
      password = project.findProperty('nexusPassword')
    }
  }

  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(Duration.ofMillis(3000))
  }
}